{"version":3,"file":"static/js/73.18d16cb5.chunk.js","mappings":"4LAWaA,GAAMC,EAAAA,EAAAA,GAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GAASC,EAAAA,G,4GChBEC,EAAWT,EAAAA,EAAAA,GAAH,wHAGL,SAAAU,GAAC,OAAIA,EAAEC,MAAMV,MAAM,EAAlB,IACR,SAAAS,GAAC,OAAIA,EAAEC,MAAMV,MAAM,EAAlB,IAIGW,EAAWZ,EAAAA,EAAAA,GAAH,6FAED,SAAAU,GAAC,OAAIA,EAAEC,MAAMV,MAAM,EAAlB,IACC,SAAAS,GAAC,OAAIA,EAAEC,MAAME,OAAOC,WAAnB,IAGVC,EAAUf,EAAAA,EAAAA,IAAH,+EAMPgB,EAAWhB,EAAAA,EAAAA,EAAH,6HACJ,SAAAU,GAAC,OAAIA,EAAEC,MAAMV,MAAM,EAAlB,IACP,SAAAS,GAAC,OAAIA,EAAEC,MAAME,OAAOI,aAAnB,IACG,SAAAP,GAAC,OAAIA,EAAEC,MAAMO,UAAUC,EAAtB,I,0DClBD,SAASC,IACtB,IAAMC,GAASC,EAAAA,EAAAA,MAEf,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KASA,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcN,EAAOO,SAASC,MAAK,SAAAC,GAEjCL,EAAQK,EAAKN,KACd,GACF,GAAE,CAACH,EAAOO,WAGT,+BACE,SAACnB,EAAD,UACGe,EAAKO,KAAI,SAAAC,GAAK,OACb,UAACpB,EAAD,YACE,SAACb,EAAA,EAAD,CAAKkC,MAAM,QAAQC,OAAO,QAAQC,SAAS,SAA3C,UACE,SAACpB,EAAD,CACEkB,MAAM,MACNG,IACEJ,EAAMK,aAAN,yCACsCL,EAAMK,cACxCC,EAENC,IAAKP,EAAMQ,UAGf,SAACxB,EAAD,UAAWgB,EAAMQ,SAZJR,EAAMS,GADR,OAmBtB,C,sNCtCKC,EAAW,+BACXC,EAAU,mCAKVC,EAAW,mCAAG,oGACKC,EAAAA,GAAAA,IAAA,UAClBH,EADkB,qCACmBC,EADnB,YADL,cACZG,EADY,yBAIXA,EAAShB,MAJE,2CAAH,qDAOXiB,EAAW,mCAAG,WAAOC,EAAOC,GAAd,uFACKJ,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCK,EADhC,gCAC6DC,EAD7D,yBADL,cACZH,EADY,yBAIXA,EAAShB,MAJE,2CAAH,wDAOXoB,EAAc,mCAAG,WAAMT,GAAN,uFACEI,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAD,EADA,oBACcE,EADd,oBADF,cACfG,EADe,yBAIdA,EAAShB,MAJK,2CAAH,sDAOdH,EAAa,mCAAG,WAAMc,GAAN,uFACGI,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAD,EADA,4BACsBE,EADtB,oBADH,cACdG,EADc,yBAIbA,EAAShB,MAJI,2CAAH,sDAObqB,EAAgB,mCAAG,WAAMV,GAAN,uFACAI,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAD,EADA,4BACsBE,EADtB,2BADA,cACjBG,EADiB,yBAIhBA,EAAShB,MAJO,2CAAH,sDAetBiB,EAAYK,UAAY,CACtBJ,MAAOK,IAAAA,OACPJ,KAAMI,IAAAA,QAGRH,EAAeE,UAAY,CACzBX,GAAIY,IAAAA,QAGN1B,EAAcyB,UAAY,CACxBX,GAAIY,IAAAA,QAGNF,EAAiBC,UAAY,CAC3BX,GAAIY,IAAAA,O","sources":["components/Box/Box.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport {\n  space,\n  layout,\n  border,\n  position,\n  typography,\n  background,\n  flexbox, shadow,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  space,\n  layout,\n  border,\n  position,\n  typography,\n  background,\n  flexbox, shadow,\n);\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: ${p => p.theme.space[4]}px;\n  gap: ${p => p.theme.space[3]}px;\n  list-style: none;\n`;\n\nexport const CastCard = styled.li`\n  width: 100px;\n  padding-bottom: ${p => p.theme.space[2]}px;\n  background-color: ${p => p.theme.colors.textPrimary};\n`;\n\nexport const CastImg = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const CastName = styled.p`\n  padding-top: ${p => p.theme.space[2]}px;\n  color: ${p => p.theme.colors.textSecondary};\n  font-size: ${p => p.theme.fontSizes.xs};\n  font-weight: 700;\n  text-align: center;\n`;\n","import { CastList, CastCard, CastImg, CastName } from './Cast.styled';\nimport { Box } from 'components/Box/Box';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastById } from 'services/api';\nimport imageplaceholder from 'images/nophoto.jpg';\n\nexport default function Cast() {\n  const params = useParams();\n  // console.log(params);\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchCastById(params.movieId).then(data => {\n      // console.log(data.cast);\n      setCast(data.cast);\n    });\n  }, [params.movieId]);\n\n  return (\n    <>\n      <CastList>\n        {cast.map(actor => (\n          <CastCard key={actor.id}>\n            <Box width=\"100px\" height=\"150px\" overflow=\"hidden\">\n              <CastImg\n                width=\"100\"\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                    : imageplaceholder\n                }\n                alt={actor.name}\n              />\n            </Box>\n            <CastName>{actor.name}</CastName>\n          </CastCard>\n        ))}\n      </CastList>\n    </>\n  );\n}\n","import PropTypes from 'prop-types';\nimport axios from 'axios';\n\nconst MAIN_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '7944ae355bdc42ac579681e106149d6b';\n\n// export const perPage = 12;\n// language=uk-UA\n\nconst fetchTrends = async () => {\n  const response = await axios.get(\n    `${MAIN_URL}/trending/all/day?api_key=${API_KEY}&page=1`\n  );\n  return response.data;\n};\n\nconst fetchMovies = async (query, page) => {\n  const response = await axios.get(\n    `${MAIN_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=${page}&include_adult=false`\n  );\n  return response.data;\n};\n\nconst fetchMovieById = async id => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchCastById = async id => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchReviewsById = async id => {\n  const response = await axios.get(\n    `${MAIN_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport {\n  fetchTrends,\n  fetchMovies,\n  fetchMovieById,\n  fetchCastById,\n  fetchReviewsById,\n};\n\nfetchMovies.propTypes = {\n  query: PropTypes.string,\n  page: PropTypes.number,\n};\n\nfetchMovieById.propTypes = {\n  id: PropTypes.string,\n};\n\nfetchCastById.propTypes = {\n  id: PropTypes.string,\n};\n\nfetchReviewsById.propTypes = {\n  id: PropTypes.string,\n};\n"],"names":["Box","styled","space","layout","border","position","typography","background","flexbox","shadow","CastList","p","theme","CastCard","colors","textPrimary","CastImg","CastName","textSecondary","fontSizes","xs","Cast","params","useParams","useState","cast","setCast","useEffect","fetchCastById","movieId","then","data","map","actor","width","height","overflow","src","profile_path","imageplaceholder","alt","name","id","MAIN_URL","API_KEY","fetchTrends","axios","response","fetchMovies","query","page","fetchMovieById","fetchReviewsById","propTypes","PropTypes"],"sourceRoot":""}