{"version":3,"file":"static/js/73.63cd5a1a.chunk.js","mappings":"mOAGaA,EAAWC,EAAAA,EAAAA,GAAH,wHAGL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACR,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAIGC,EAAWJ,EAAAA,EAAAA,GAAH,2IAOH,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,QAAQC,WAApB,IAINC,GAAgBP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,kD,iDChBX,SAASS,EAAT,GAAgC,IAAhBC,EAAe,EAAfA,YACvBC,GAASC,EAAAA,EAAAA,MAEf,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAWC,EAAAA,EAAAA,MASjB,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcR,EAAOS,QAASV,GAAaW,MAAK,SAAAC,GAE9CP,EAAQO,EAAKR,KACd,GACF,GAAE,CAACJ,EAAaC,EAAOS,WAGtB,+BACE,SAACrB,EAAD,UACGe,EAAKS,KAAI,SAAAC,GAAK,OACb,SAACpB,EAAD,WACE,SAACG,EAAD,CACEkB,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMZ,GAFjB,UAIE,SAACa,EAAA,EAAD,CAAWL,MAAOA,OALPA,EAAMM,QADR,OAatB,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: ${p => p.theme.space[4]}px;\n  gap: ${p => p.theme.space[3]}px;\n  list-style: none;\n`;\n\nexport const CastCard = styled.li`\n  box-shadow: none;\n\n  transition: box-shadow 250ms linear;\n\n  :hover,\n  :focus {\n    box-shadow: ${p => p.theme.shadows.blackShadow};\n  }\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  text-decoration: none;\n`;\n","import { CastList, CastCard, StyledNavLink } from './Cast.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { fetchCastById } from 'services/api';\nimport { ActorCard } from 'components/ActorCard/ActorCard';\n\nexport default function Cast({ currentLang }) {\n  const params = useParams();\n  // console.log(params);\n  const [cast, setCast] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    fetchCastById(params.movieId, currentLang).then(data => {\n      // console.log(data.cast);\n      setCast(data.cast);\n    });\n  }, [currentLang, params.movieId]);\n\n  return (\n    <>\n      <CastList>\n        {cast.map(actor => (\n          <CastCard key={actor.cast_id}>\n            <StyledNavLink\n              to={`/actors/${actor.id}`}\n              state={{ from: location }}\n            >\n              <ActorCard actor={actor} />\n            </StyledNavLink>\n          </CastCard>\n        ))}\n      </CastList>\n    </>\n  );\n}\n"],"names":["CastList","styled","p","theme","space","CastCard","shadows","blackShadow","StyledNavLink","NavLink","Cast","currentLang","params","useParams","useState","cast","setCast","location","useLocation","useEffect","fetchCastById","movieId","then","data","map","actor","to","id","state","from","ActorCard","cast_id"],"sourceRoot":""}